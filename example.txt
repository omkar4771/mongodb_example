C:\Users\Omkar>mongosh
Current Mongosh Log ID: 6663443f784f6aec0dca976d
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.0.2
Using MongoDB:          7.0.2
Using Mongosh:          2.0.2
mongosh 2.2.6 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-05-30T10:02:54.998+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------
test> show dbs
Emp          40.00 KiB
admin        40.00 KiB
college      72.00 KiB
config       60.00 KiB
local        88.00 KiB
restaurant  644.00 KiB
test        416.00 KiB
test> use restaurant
switched to db restaurant


//1.Write a MongoDB query to display all the documents in the collection restaurants.
restaurant> show collections
restaurants

//2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
restaurant> db.restaurants.find()

//5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.
restaurant> db.restaurants.find({borough : "Bronx"});

//6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
restaurant> db.restaurants.find({"borough": "Bronx"}).limit(5);

//7. Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
restaurant> db.restaurants.find({"borough": "Bronx"}).skip(5).limit(5);

//8.Write a MongoDB query to find the restaurants who achieved a score more than 90.
restaurant> db.restaurants.find({grades : { $elemMatch:{"score":{$gt : 90}}}});

//9.Write a MongoDB query to find the restaurants that achieved a score is more than 80 but less than 100.
restaurant> db.restaurants.find({grades : { $elemMatch:{"score":{$gt : 80 , $lt :100}}}});

//10.Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.
restaurant> db.restaurants.find({"address.coord" : {$lt : -95.754168}});

//11.  Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
restaurant> db.restaurants.find({$and:[{"cuisine" : {$ne :"American "}},{"grades.score" : {$gt : 70}},{"address.coord" : {$lt : -65.754168}}]});

//12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
Note : Do this query without using $and operator.
restaurant> db.restaurants.find({ "cuisine" : {$ne : "American "}, "grades.score" :{$gt: 70}, "address.coord" : {$lt : -65.754168} });

//13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
restaurant>db.restaurants.find( {"cuisine" : {$ne : "American"}, "grades.grade" :"A", "borough": {$ne : "Brooklyn"}} ).sort({"cuisine":-1});

//14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name
restaurant> db.restaurants.find({name: /^Wil/},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

//15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
restaurant> db.restaurants.find({name: /ces$/},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

//16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name
restaurant> db.restaurants.find({"name": /.*Reg.*/},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

//17.
//18.
